package GUI;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.*;
import java.util.ArrayList;

import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

import DTO.CongThucDTO;
import DTO.LoaiMonDTO;
import DTO.MonDTO;
import DTO.NguyenLieuDTO;
import BUS.n4_CongThucBUS;
import BUS.n5_NguyenLieuBUS;
import Util.TableCustom;
/**
 *
 * @author dvmv2
 */
public class n4_CongThucDialog extends javax.swing.JFrame {
    private n5_NguyenLieuBUS nguyenLieuBUS;
    private n4_CongThucBUS congThucBUS;
    private String maMon;
    /**
     * Creates new form LoaiMonJFrame
     */
    public n4_CongThucDialog(MonDTO mon) {
        nguyenLieuBUS = new n5_NguyenLieuBUS();
        congThucBUS = new n4_CongThucBUS();
        this.maMon = mon.getMaMon();
        initComponents(mon);
        setPreferredSize(new Dimension(990, 570));
        setVisible(true);
        setLocationRelativeTo(null);
        TableCustom.apply(jScrollPane1, TableCustom.TableType.MULTI_LINE);
        TableCustom.apply(jScrollPane3, TableCustom.TableType.MULTI_LINE);
        initActionListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents(MonDTO mon) {

        jPanel8 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        tf_TimKiem = new javax.swing.JTextField();
        btn_TimKiem = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        dsNguyenLieu = new javax.swing.JTable();
        jPanel11 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tf_Mon = new javax.swing.JTextField();
        tf_NguyenLieu = new javax.swing.JTextField();
        tf_KhoiLuong = new javax.swing.JTextField();
        btn_Luu = new javax.swing.JButton();
        btn_Sua = new javax.swing.JButton();
        btn_Xoa = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        dsCongThuc = new javax.swing.JTable();
        cb_TimKiem = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(955, 610));

        jPanel8.setBackground(new java.awt.Color(240, 214, 173));
        jPanel8.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 3, 0, new java.awt.Color(68, 0, 0)));
        jPanel8.setPreferredSize(new java.awt.Dimension(800, 50));

        jLabel4.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("TẠO CÔNG THỨC MÓN");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel4.setPreferredSize(new java.awt.Dimension(250, 20));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(344, 344, 344)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.setBackground(new java.awt.Color(240, 214, 173));
        jPanel1.setMaximumSize(new java.awt.Dimension(800, 400));
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 400));


        btn_TimKiem.setText("Tìm Kiếm");

        dsNguyenLieu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Mã NL", "Tên NL", "Kho"
            }
        ));
        jScrollPane3.setViewportView(dsNguyenLieu);

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));
        jPanel11.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Món");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Nguyên Liệu");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Khối Lượng");

        btn_Luu.setText("Lưu");

        btn_Sua.setText("Sửa");

        btn_Xoa.setText("Xóa");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tf_Mon, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tf_NguyenLieu, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tf_KhoiLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(btn_Luu, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(btn_Sua, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_Xoa, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tf_Mon, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_NguyenLieu, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_KhoiLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_Luu, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_Sua, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_Xoa, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(dsCongThuc);


        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(tf_TimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cb_TimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_TimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tf_TimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_TimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cb_TimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, 990, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 990, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cb_TimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_TimKiemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_TimKiemActionPerformed

    /**
     * @param args the command line arguments
     */

    public void fillTableNguyenLieu() {
        DefaultTableModel modelTable = new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Không cho phép chỉnh sửa bất kỳ ô nào
            }
        };
        modelTable.addColumn("Mã NL");
        modelTable.addColumn("Tên NL");
        modelTable.addColumn("Kho");
        
        ArrayList<NguyenLieuDTO> list = nguyenLieuBUS.getAll();
        for(int i = 0; i < list.size(); i++) {
            modelTable.addRow(new Object[] {
                list.get(i).getMaNguyenLieu(),
                list.get(i).getTenNguyenLieu(),
                list.get(i).getKhoiLuongNguyenLieu()
            });
        }
        dsNguyenLieu.setModel(modelTable);
        // Chỉnh độ rộng cột
        TableColumnModel columnModel = dsNguyenLieu.getColumnModel();

        columnModel.getColumn(0).setPreferredWidth(50);
        columnModel.getColumn(1).setPreferredWidth(200); 
        columnModel.getColumn(2).setPreferredWidth(50); 
        dsNguyenLieu.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); // Chọn 1 hàng tại 1 thời điểm
        dsNguyenLieu.setRowSelectionAllowed(true); // Cho phép chọn theo hàng
        dsNguyenLieu.setColumnSelectionAllowed(false); // Không cho phép chọn từng cộ
    }
    public void fillTableCongThuc() {
        DefaultTableModel modelTable = new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Không cho phép chỉnh sửa bất kỳ ô nào
            }
        };
        modelTable.addColumn("Mã NL");
        modelTable.addColumn("Tên NL");
        modelTable.addColumn("Khối Lượng Sử dụng");
        
        ArrayList<CongThucDTO> list = congThucBUS.getCongThucByMaMon(maMon);
        for(int i = 0; i < list.size(); i++) {
            String maNguyenLieu = String.valueOf(list.get(i).getMaNguyenLieu());
            modelTable.addRow(new Object[] {
                maNguyenLieu,
                nguyenLieuBUS.getNguyenLieuById(maNguyenLieu).getTenNguyenLieu(),
                list.get(i).getKhoiLuong()
            });
        }
        dsCongThuc.setModel(modelTable);
        // Chỉnh độ rộng cột
        TableColumnModel columnModel = dsNguyenLieu.getColumnModel();

        columnModel.getColumn(0).setPreferredWidth(50); 
        columnModel.getColumn(1).setPreferredWidth(150); 
        columnModel.getColumn(2).setPreferredWidth(100);
        dsCongThuc.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); // Chọn 1 hàng tại 1 thời điểm
        dsCongThuc.setRowSelectionAllowed(true); // Cho phép chọn theo hàng
        dsCongThuc.setColumnSelectionAllowed(false); // Không cho phép chọn từng cột
    }
    public void timKiem() {
        ArrayList<NguyenLieuDTO> dsTimDuoc = new ArrayList<>();
        ArrayList<NguyenLieuDTO> dsNL = nguyenLieuBUS.getAll();
        String input = String.valueOf(tf_TimKiem.getText()).toLowerCase().trim();
        if(input.length() ==  0) {
            JOptionPane.showMessageDialog(null, "Tìm kiếm không được để trống !", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            fillTableNguyenLieu();
            return;
        }
        if(input.length() > 50) {
            JOptionPane.showMessageDialog(null, "Tìm kiếm không được vượt quá 50 ký tự !", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            fillTableNguyenLieu();
            return;
        }
        
        if(cb_TimKiem.getSelectedItem().toString().equals("Mã NL")) {
            for (int i = 0; i < dsNL.size(); i++) {
                if(dsNL.get(i).getMaNguyenLieu().toLowerCase().contains(input)) {
                    dsTimDuoc.add(dsNL.get(i));
                }
            }
        } else if(cb_TimKiem.getSelectedItem().toString().equals("Tên NL")){
            for (int i = 0; i < dsNL.size(); i++) {
                if(dsNL.get(i).getTenNguyenLieu().toLowerCase().contains(input)) {
                    dsTimDuoc.add(dsNL.get(i));
                }
            }
        }
        if(dsTimDuoc.size() == 0) {
            JOptionPane.showMessageDialog(null, "Không tìm thấy nguyên liệu phù hợp !", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            fillTableNguyenLieu();
            return;
        }
        DefaultTableModel modelTable = new DefaultTableModel();
        modelTable.addColumn("Mã NL");
        modelTable.addColumn("Tên NL");
        modelTable.addColumn("Kho");
        for(int i = 0; i < dsTimDuoc.size(); i++) {
            modelTable.addRow(new Object[] {
                dsTimDuoc.get(i).getMaNguyenLieu(),
                dsTimDuoc.get(i).getTenNguyenLieu(),
                dsTimDuoc.get(i).getKhoiLuongNguyenLieu(),
            });
        }
        
        dsNguyenLieu.setModel(modelTable);
    }
    public void btn_LuuAction() {
        int selectedRow = dsNguyenLieu.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn nguyên liệu trong bảng nguyên liệu bên trái!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if(String.valueOf(tf_NguyenLieu.getText()).equals("")) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn 1 nguyên liệu!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if(!isValidNumber(String.valueOf(tf_KhoiLuong.getText()))) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập khối lượng phù hợp!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        int confirm = JOptionPane.showConfirmDialog(null,"Bạn có muốn thêm nguyên liệu này?","Xác nhận",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if (confirm == JOptionPane.YES_OPTION) {
            String maNguyenLieu = String.valueOf(dsNguyenLieu.getValueAt(selectedRow, 0));
            Double khoiLuong = Double.valueOf(tf_KhoiLuong.getText());
            CongThucDTO congThuc = new CongThucDTO(maMon, maNguyenLieu, khoiLuong);
            if(congThucBUS.getCongThucByMaMonVaMaNguyenLieu(congThuc) != null) {
                JOptionPane.showMessageDialog(null, "Đã tồn tại nguyên liệu trong công thức, vui lòng chọn trong bảng công thức và sửa lại!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return;
            }
            if(congThucBUS.addCongThuc(congThuc)){
                JOptionPane.showMessageDialog(null, "Thêm công thức thành công !", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                reloadData();
            }
            else 
                JOptionPane.showMessageDialog(null, "Thêm công thức thất bại !", "Thông báo", JOptionPane.ERROR_MESSAGE);
        }
    }
    public void btn_SuaAction() {
        int selectedRow = dsCongThuc.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn nguyên liệu trong bảng công thức bên phải!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if(String.valueOf(tf_NguyenLieu.getText()).equals("")) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn 1 nguyên liệu!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if(!isValidNumber(String.valueOf(tf_KhoiLuong.getText()))) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập khối lượng phù hợp!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return;
        }   
        int confirm = JOptionPane.showConfirmDialog(null,"Bạn có muốn sửa công thức này?","Xác nhận",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if (confirm == JOptionPane.YES_OPTION) {
            String maNguyenLieu = String.valueOf(dsCongThuc.getValueAt(selectedRow, 0));
            Double khoiLuong = Double.valueOf(tf_KhoiLuong.getText());
            CongThucDTO congThuc = new CongThucDTO(maMon, maNguyenLieu, khoiLuong);
            if(congThucBUS.updateCongThuc(congThuc)){
                JOptionPane.showMessageDialog(null, "Sửa công thức thành công !", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                reloadData();
            }
            else 
                JOptionPane.showMessageDialog(null, "Sửa công thức thất bại !", "Thông báo", JOptionPane.ERROR_MESSAGE);
        }
    }
    public void btn_XoaAction() {
        int selectedRow = dsCongThuc.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn công thức trong bảng công thức bên phải!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        int confirm = JOptionPane.showConfirmDialog(null,"Bạn có muốn xóa công thức này?","Xác nhận",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if (confirm == JOptionPane.YES_OPTION) {
            String maNguyenLieu = String.valueOf(dsNguyenLieu.getValueAt(selectedRow, 0));
            CongThucDTO congThuc = new CongThucDTO(maMon, maNguyenLieu,null);
            if(congThucBUS.deleteCongThuc(congThuc)){
                JOptionPane.showMessageDialog(null, "Xóa công thức thành công !", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                reloadData();
            }
            else 
                JOptionPane.showMessageDialog(null, "Xóa công thức thất bại !", "Thông báo", JOptionPane.ERROR_MESSAGE);
        }
    }
    public boolean isValidNumber(String str) {
        if(!isNumber(str)) 
            return false;   
        if(Double.parseDouble(str) > 0) 
            return true;
        else  
            return false;
    }
    public boolean isNumber(String str) {
        try {
            Double.parseDouble(str); // Thử chuyển chuỗi thành số
            return true;
        } catch (NumberFormatException e) {
            return false; // Nếu không thể chuyển, thì không phải là số
        }
    }
    public void reloadData() {
        dsCongThuc.clearSelection();
        dsNguyenLieu.clearSelection();
        tf_NguyenLieu.setText("");
        tf_KhoiLuong.setText("");
        fillTableCongThuc();
    }
    public void initActionListener() {
        tf_Mon.setEditable(false);
        tf_Mon.setEnabled(false);
        tf_Mon.setBackground(Color.WHITE);
        tf_NguyenLieu.setEditable(false);
        tf_NguyenLieu.setEnabled(false);
        tf_NguyenLieu.setBackground(Color.WHITE);
        cb_TimKiem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mã NL", "Tên NL" }));
        tf_TimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timKiem();
            }
        });
        btn_TimKiem.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        timKiem();
                    }
                });
        btn_Luu.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        btn_LuuAction();
                    }
                });
        btn_Sua.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        btn_SuaAction();
                    }
                });
        btn_Xoa.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        btn_XoaAction();
                    }
                });
                fillTableNguyenLieu();
        dsNguyenLieu.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {
                if (!event.getValueIsAdjusting()) {
                    int selectedRow = dsNguyenLieu.getSelectedRow();
                    if (selectedRow != -1) {
                        dsCongThuc.clearSelection();
                        String NguyenLieu = String.valueOf(dsNguyenLieu.getValueAt(selectedRow, 1));
                        tf_NguyenLieu.setText(NguyenLieu);
                        tf_KhoiLuong.setText("");
                    }
                }
            }
        });
        fillTableCongThuc();
        dsCongThuc.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {
                if (!event.getValueIsAdjusting()) {
                    int selectedRow = dsCongThuc.getSelectedRow();
                    if (selectedRow != -1) {
                        dsNguyenLieu.clearSelection();
                        String NguyenLieu = String.valueOf(dsCongThuc.getValueAt(selectedRow, 1));
                        String KhoiLuong = String.valueOf(dsCongThuc.getValueAt(selectedRow, 2));
                        tf_NguyenLieu.setText(NguyenLieu);
                        tf_KhoiLuong.setText(KhoiLuong);
                    }
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Luu;
    private javax.swing.JButton btn_Sua;
    private javax.swing.JButton btn_TimKiem;
    private javax.swing.JButton btn_Xoa;
    private javax.swing.JComboBox<String> cb_TimKiem;
    private javax.swing.JTable dsCongThuc;
    private javax.swing.JTable dsNguyenLieu;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField tf_KhoiLuong;
    private javax.swing.JTextField tf_Mon;
    private javax.swing.JTextField tf_NguyenLieu;
    private javax.swing.JTextField tf_TimKiem;
    // End of variables declaration//GEN-END:variables
}
